{"version":3,"sources":["modules/counter.js","utils/history.js","modules/index.js","configureStore.js","utils/ErrorBoundary.js","components/Loading/index.js","containers/Home/index.js","containers/About/index.js","containers/Work/index.js","containers/Contact/index.js","containers/NotFound/index.js","components/Navigation/index.js","constants/routes.js","containers/App/index.js","serviceWorker.js","index.js"],"names":["initialState","count","isIncrementing","isDecrementing","__webpack_exports__","state","arguments","length","undefined","type","Object","_Users_dinh_hiep_sy_Desktop_cra_redux_starter_kit_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","increment","dispatch","incrementAsync","setTimeout","decrement","decrementAsync","history","createBrowserHistory","rootReducer","combineReducers","router","connectRouter","counter","middleware","thunk","routerMiddleware","composedEnhancers","compose","apply","applyMiddleware","concat","store","createStore","ErrorBoundary","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderFallbackUI","react_default","a","createElement","hasError","errorInfo","props","children","error","Component","Loading","LazyLoadedContainer","lazy","__webpack_require__","e","then","bind","Home","utils_ErrorBoundary","react","fallback","components_Loading","Promise","all","About","About_LazyLoadedContainer","Work","Work_LazyLoadedContainer","Contact","Contact_LazyLoadedContainer","NotFound","NotFound_LazyLoadedContainer","Navigation","role","NavLink","exact","to","AppContainer","components_Navigation","Switch","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","es","esm","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e3c7e16c.chunk.js","sourcesContent":["// Actions\nexport const INCREMENT_REQUESTED = 'counter/INCREMENT_REQUESTED';\nexport const INCREMENT = 'counter/INCREMENT';\nexport const DECREMENT_REQUESTED = 'counter/DECREMENT_REQUESTED';\nexport const DECREMENT = 'counter/DECREMENT';\n\n// Initial State\nconst initialState = {\n  count: 0,\n  isIncrementing: false,\n  isDecrementing: false,\n};\n\n// Reducer\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT_REQUESTED:\n      return {\n        ...state,\n        isIncrementing: true,\n      };\n\n    case INCREMENT:\n      return {\n        ...state,\n        count: state.count + 1,\n        isIncrementing: !state.isIncrementing,\n      };\n\n    case DECREMENT_REQUESTED:\n      return {\n        ...state,\n        isDecrementing: true,\n      };\n\n    case DECREMENT:\n      return {\n        ...state,\n        count: state.count - 1,\n        isDecrementing: !state.isDecrementing,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// Action Creators\nexport const increment = () => {\n  return dispatch => {\n    dispatch({\n      type: INCREMENT_REQUESTED,\n    });\n\n    dispatch({\n      type: INCREMENT,\n    });\n  };\n};\n\nexport const incrementAsync = () => {\n  return dispatch => {\n    dispatch({\n      type: INCREMENT_REQUESTED,\n    });\n\n    return setTimeout(() => {\n      dispatch({\n        type: INCREMENT,\n      });\n    }, 3000);\n  };\n};\n\nexport const decrement = () => {\n  return dispatch => {\n    dispatch({\n      type: DECREMENT_REQUESTED,\n    });\n\n    dispatch({\n      type: DECREMENT,\n    });\n  };\n};\n\nexport const decrementAsync = () => {\n  return dispatch => {\n    dispatch({\n      type: DECREMENT_REQUESTED,\n    });\n\n    return setTimeout(() => {\n      dispatch({\n        type: DECREMENT,\n      });\n    }, 3000);\n  };\n};\n","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nexport default history;\n","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nimport counter from './counter';\n\nconst rootReducer = history =>\n  combineReducers({\n    router: connectRouter(history),\n    counter,\n  });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport thunk from 'redux-thunk';\nimport history from 'utils/history';\nimport rootReducer from 'modules';\n\nconst initialState = {};\nconst enhancers = [];\nconst middleware = [thunk, routerMiddleware(history)];\n\nif (process.env.NODE_ENV === 'development') {\n  const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__;\n\n  if (typeof devToolsExtension === 'function') {\n    enhancers.push(devToolsExtension());\n  }\n}\n\nconst composedEnhancers = compose(\n  applyMiddleware(...middleware),\n  ...enhancers,\n);\n\nconst store = createStore(rootReducer(history), initialState, composedEnhancers);\n\nexport default store;\n","/**\n * ErrorBoundary\n *\n * https://reactjs.org/docs/error-boundaries.html\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ErrorBoundary extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hasError: false,\n      errorInfo: null,\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    return {\n      hasError: true,\n      errorInfo: error,\n    };\n  }\n\n  renderFallbackUI = () => <div>Sorry, an error occurred.</div>;\n\n  render() {\n    if (this.state.hasError) {\n      return this.renderFallbackUI;\n    }\n\n    return this.props.children;\n  }\n}\n\nErrorBoundary.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default ErrorBoundary;\n","import React from 'react';\n\nconst Loading = () => <h1>Loading...</h1>;\n\nexport default Loading;\n","import React, { lazy, Suspense } from 'react';\n\nimport ErrorBoundary from 'utils/ErrorBoundary';\nimport Loading from 'components/Loading';\n\nconst LazyLoadedContainer = lazy(() => import('./Container'));\n\nconst Home = () => (\n  <ErrorBoundary>\n    <Suspense fallback={<Loading />}>\n      <LazyLoadedContainer />\n    </Suspense>\n  </ErrorBoundary>\n);\n\nexport default Home;\n","import React, { lazy, Suspense } from 'react';\n\nimport ErrorBoundary from 'utils/ErrorBoundary';\nimport Loading from 'components/Loading';\n\nconst LazyLoadedContainer = lazy(() => import('./Container'));\n\nconst About = () => (\n  <ErrorBoundary>\n    <Suspense fallback={<Loading />}>\n      <LazyLoadedContainer />\n    </Suspense>\n  </ErrorBoundary>\n);\n\nexport default About;\n","import React, { lazy, Suspense } from 'react';\n\nimport ErrorBoundary from 'utils/ErrorBoundary';\nimport Loading from 'components/Loading';\n\nconst LazyLoadedContainer = lazy(() => import('./Container'));\n\nconst Work = () => (\n  <ErrorBoundary>\n    <Suspense fallback={<Loading />}>\n      <LazyLoadedContainer />\n    </Suspense>\n  </ErrorBoundary>\n);\n\nexport default Work;\n","import React, { lazy, Suspense } from 'react';\n\nimport ErrorBoundary from 'utils/ErrorBoundary';\nimport Loading from 'components/Loading';\n\nconst LazyLoadedContainer = lazy(() => import('./Container'));\n\nconst Contact = () => (\n  <ErrorBoundary>\n    <Suspense fallback={<Loading />}>\n      <LazyLoadedContainer />\n    </Suspense>\n  </ErrorBoundary>\n);\n\nexport default Contact;\n","import React, { lazy, Suspense } from 'react';\n\nimport ErrorBoundary from 'utils/ErrorBoundary';\nimport Loading from 'components/Loading';\n\nconst LazyLoadedContainer = lazy(() => import('./Container'));\n\nconst NotFound = () => (\n  <ErrorBoundary>\n    <Suspense fallback={<Loading />}>\n      <LazyLoadedContainer />\n    </Suspense>\n  </ErrorBoundary>\n);\n\nexport default NotFound;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport * as routes from 'constants/routes';\n\nconst Navigation = () => (\n  <nav role=\"navigation\">\n    <ul>\n      <li>\n        <NavLink exact to={routes.HOME}>\n          Home\n        </NavLink>\n      </li>\n      <li>\n        <NavLink exact to={routes.ABOUT}>\n          About\n        </NavLink>\n      </li>\n      <li>\n        <NavLink exact to={routes.WORK}>\n          Work\n        </NavLink>\n      </li>\n      <li>\n        <NavLink exact to={routes.CONTACT}>\n          Contact\n        </NavLink>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Navigation;\n","export const HOME = '/';\nexport const ABOUT = '/about';\nexport const WORK = '/work';\nexport const CONTACT = '/contact';\n","import React, { Component, Fragment } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Home from 'containers/Home';\nimport About from 'containers/About';\nimport Work from 'containers/Work';\nimport Contact from 'containers/Contact';\nimport NotFound from 'containers/NotFound';\n\nimport Navigation from 'components/Navigation';\n\nimport * as routes from 'constants/routes';\n\nclass AppContainer extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Navigation />\n        <Switch>\n          <Route exact path={routes.HOME} component={Home} />\n          <Route path={routes.ABOUT} component={About} />\n          <Route path={routes.WORK} component={Work} />\n          <Route path={routes.CONTACT} component={Contact} />\n          <Route component={NotFound} />\n        </Switch>\n      </Fragment>\n    );\n  }\n}\n\nexport default AppContainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\n\nimport store from 'configureStore';\nimport history from 'utils/history';\n\nimport 'styles/main.scss';\nimport App from 'containers/App';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}